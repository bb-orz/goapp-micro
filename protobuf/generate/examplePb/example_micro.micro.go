// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: example_micro.proto

/*
Package examplePb is a generated protocol buffer package.

It is generated from these files:
	example_micro.proto

It has these top-level messages:
	EmptyReqMsg
	CommonRespMsg
	FooReqMsg
	FooRespMsg
	BarReqMsg
	BarRespMsg
*/
package examplePb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ExampleMicroService service

type ExampleMicroService interface {
	Ping(ctx context.Context, in *EmptyReqMsg, opts ...client.CallOption) (*CommonRespMsg, error)
	Foo(ctx context.Context, in *FooReqMsg, opts ...client.CallOption) (*FooRespMsg, error)
	Bar(ctx context.Context, in *BarReqMsg, opts ...client.CallOption) (*BarRespMsg, error)
}

type exampleMicroService struct {
	c    client.Client
	name string
}

func NewExampleMicroService(name string, c client.Client) ExampleMicroService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "examplemicroservice"
	}
	return &exampleMicroService{
		c:    c,
		name: name,
	}
}

func (c *exampleMicroService) Ping(ctx context.Context, in *EmptyReqMsg, opts ...client.CallOption) (*CommonRespMsg, error) {
	req := c.c.NewRequest(c.name, "ExampleMicroService.Ping", in)
	out := new(CommonRespMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleMicroService) Foo(ctx context.Context, in *FooReqMsg, opts ...client.CallOption) (*FooRespMsg, error) {
	req := c.c.NewRequest(c.name, "ExampleMicroService.Foo", in)
	out := new(FooRespMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleMicroService) Bar(ctx context.Context, in *BarReqMsg, opts ...client.CallOption) (*BarRespMsg, error) {
	req := c.c.NewRequest(c.name, "ExampleMicroService.Bar", in)
	out := new(BarRespMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExampleMicroService service

type ExampleMicroServiceHandler interface {
	Ping(context.Context, *EmptyReqMsg, *CommonRespMsg) error
	Foo(context.Context, *FooReqMsg, *FooRespMsg) error
	Bar(context.Context, *BarReqMsg, *BarRespMsg) error
}

func RegisterExampleMicroServiceHandler(s server.Server, hdlr ExampleMicroServiceHandler, opts ...server.HandlerOption) error {
	type exampleMicroService interface {
		Ping(ctx context.Context, in *EmptyReqMsg, out *CommonRespMsg) error
		Foo(ctx context.Context, in *FooReqMsg, out *FooRespMsg) error
		Bar(ctx context.Context, in *BarReqMsg, out *BarRespMsg) error
	}
	type ExampleMicroService struct {
		exampleMicroService
	}
	h := &exampleMicroServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExampleMicroService{h}, opts...))
}

type exampleMicroServiceHandler struct {
	ExampleMicroServiceHandler
}

func (h *exampleMicroServiceHandler) Ping(ctx context.Context, in *EmptyReqMsg, out *CommonRespMsg) error {
	return h.ExampleMicroServiceHandler.Ping(ctx, in, out)
}

func (h *exampleMicroServiceHandler) Foo(ctx context.Context, in *FooReqMsg, out *FooRespMsg) error {
	return h.ExampleMicroServiceHandler.Foo(ctx, in, out)
}

func (h *exampleMicroServiceHandler) Bar(ctx context.Context, in *BarReqMsg, out *BarRespMsg) error {
	return h.ExampleMicroServiceHandler.Bar(ctx, in, out)
}
